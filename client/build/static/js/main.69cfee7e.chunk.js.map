{"version":3,"sources":["utils/auth.js","utils/API.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","saveBook","bookData","fetch","method","headers","authorization","body","JSON","stringify","deleteBook","bookId","gql","removeBookId","savedBookIds","parse","updatedSavedBookIds","filter","savedBookId","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","response","ok","Error","json","items","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","userData","setUserData","userDataLength","Object","keys","handleDeleteBook","updatedUser","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","user","log","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","ApolloClient","request","operation","t","setContext","uri","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69cfee7e.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from \"jwt-decode\";\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem(\"id_token\");\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem(\"id_token\", idToken);\r\n    window.location.assign(\"/\");\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem(\"id_token\");\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign(\"/\");\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch(\"/api/users/me\", {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch(\"/api/users\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch(\"/api/users/login\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch(\"/api/users\", {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n        login($email: String!, $password: String!) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $email: String!, $password: String!) {\r\n        addUser($username: String!, $email: String!, $password: String!) {\r\n            token\r\n            user {\r\n                _id\r\n                username\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($bookId: String!) {\r\n        saveBook(bookId: $bookId) {\r\n            authors\r\n            description\r\n            title\r\n            bookId\r\n            image\r\n            link\r\n        }\r\n    } \r\n`\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($bookId: String!) {\r\n        removeBook(bookId: $bookId) {\r\n            authors\r\n            description\r\n            title\r\n            bookId\r\n            image\r\n            link\r\n        }\r\n    } \r\n`","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem(\"saved_books\")\r\n    ? JSON.parse(localStorage.getItem(\"saved_books\"))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem(\"saved_books\", JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem(\"saved_books\");\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem(\"saved_books\")\r\n    ? JSON.parse(localStorage.getItem(\"saved_books\"))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter(\r\n    (savedBookId) => savedBookId !== bookId\r\n  );\r\n  localStorage.setItem(\"saved_books\", JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Auth from \"../utils/auth\";\r\nimport { saveBook, searchGoogleBooks } from \"../utils/API\";\r\nimport { SAVE_BOOK } from \"../utils/mutations\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardColumns,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  Jumbotron,\r\n} from \"react-bootstrap\";\r\n\r\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst SearchBooks = () => {\r\n  // create state for holding returned google api data\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  // create state for holding our search field data\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n  // create state to hold saved bookId values\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n\r\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\r\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n  // create method to search for books and set state on form submit\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || [\"No author to display\"],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // create function to handle saving a book to our database\r\n  const handleSaveBook = async (bookId) => {\r\n    // find the book in `searchedBooks` state by the matching id\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    // get token\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      await saveBook({\r\n        variables: { bookId },\r\n      })\r\n      // if book successfully saves to user's account, save book id to state\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name=\"searchInput\"\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"lg\"\r\n                  placeholder=\"Search for a book\"\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : \"Search for a book to begin\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )}\r\n                      className=\"btn-block btn-info\"\r\n                      onClick={() => handleSaveBook(book.bookId)}\r\n                    >\r\n                      {savedBookIds?.some(\r\n                        (savedBookId) => savedBookId === book.bookId\r\n                      )\r\n                        ? \"This book has already been saved!\"\r\n                        : \"Save this Book!\"}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Jumbotron,\r\n  Container,\r\n  CardColumns,\r\n  Card,\r\n  Button,\r\n} from \"react-bootstrap\";\r\n\r\nimport { getMe, deleteBook } from \"../utils/API\";\r\nimport Auth from \"../utils/auth\";\r\nimport { removeBookId } from \"../utils/localStorage\";\r\n\r\nconst SavedBooks = () => {\r\n  const [userData, setUserData] = useState({});\r\n\r\n  // use this to determine if `useEffect()` hook needs to run again\r\n  const userDataLength = Object.keys(userData).length;\r\n\r\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\r\n  const handleDeleteBook = async (bookId) => {\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const response = await deleteBook(bookId, token);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const updatedUser = await response.json();\r\n      setUserData(updatedUser);\r\n      // upon success, remove book's id from localStorage\r\n      removeBookId(bookId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // if data isn't here yet, say so\r\n  if (!userDataLength) {\r\n    return <h2>LOADING...</h2>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className=\"text-light bg-dark\">\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${\r\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\r\n              }:`\r\n            : \"You have no saved books!\"}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border=\"dark\">\r\n                {book.image ? (\r\n                  <Card.Img\r\n                    src={book.image}\r\n                    alt={`The cover for ${book.title}`}\r\n                    variant=\"top\"\r\n                  />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className=\"small\">Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button\r\n                    className=\"btn-block btn-danger\"\r\n                    onClick={() => handleDeleteBook(book.bookId)}\r\n                  >\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\nimport { createUser } from \"../utils/API\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [userFormData, setUserFormData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const response = await createUser(userFormData);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { token, user } = await response.json();\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your username\"\r\n            name=\"username\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Username is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"email\"\r\n            placeholder=\"Your email address\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={\r\n            !(\r\n              userFormData.username &&\r\n              userFormData.email &&\r\n              userFormData.password\r\n            )\r\n          }\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","// see SignupForm.js for comments\r\nimport React, { useState } from \"react\";\r\nimport { Form, Button, Alert } from \"react-bootstrap\";\r\n\r\nimport { loginUser } from \"../utils/API\";\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst LoginForm = () => {\r\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUserFormData({ ...userFormData, [name]: value });\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check if form has everything (as per react-bootstrap docs)\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const response = await loginUser(userFormData);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"something went wrong!\");\r\n      }\r\n\r\n      const { token, user } = await response.json();\r\n      console.log(user);\r\n      Auth.login(token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setUserFormData({\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert\r\n          dismissible\r\n          onClose={() => setShowAlert(false)}\r\n          show={showAlert}\r\n          variant=\"danger\"\r\n        >\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Your email\"\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Email is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            placeholder=\"Your password\"\r\n            name=\"password\"\r\n            onChange={handleInputChange}\r\n            value={userFormData.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            Password is required!\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(userFormData.email && userFormData.password)}\r\n          type=\"submit\"\r\n          variant=\"success\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\r\nimport SignUpForm from \"./SignupForm\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to=\"/\">\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"navbar\" />\r\n          <Navbar.Collapse id=\"navbar\">\r\n            <Nav className=\"ml-auto\">\r\n              <Nav.Link as={Link} to=\"/\">\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to=\"/saved\">\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>\r\n                  Login/Sign Up\r\n                </Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size=\"lg\"\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby=\"signup-modal\"\r\n      >\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey=\"login\">\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"signup-modal\">\r\n              <Nav variant=\"pills\">\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey=\"login\">\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey=\"signup\">\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport SearchBooks from \"./pages/SearchBooks\";\r\nimport SavedBooks from \"./pages/SavedBooks\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { ApolloClient } from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const t = localStorage.getItem(\"id_token\");\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: t ? `Bearer ${t}` : \"\",\r\n      }\r\n    })\r\n  },\r\n  uri: \"/graphql\",\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={SearchBooks} />\r\n          <Route exact path=\"/saved\" component={SavedBooks} />\r\n          <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}